#include "CPath.h"

#include "CLogger.h"

#ifdef _WIN32
inline constexpr size_t MAX_PATH_LENGTH = __std_fs_max_path;
#else
#   include <linux/limits.h>
inline constexpr size_t MAX_PATH_LENGTH = PATH_MAX; 
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
CPath::CPath(const std::filesystem::path& other)
    :
    std::filesystem::path(other)
{
    FixLongPath();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
CPath::CPath(std::filesystem::path&& other)
    :
    std::filesystem::path(std::move(other))
{
    FixLongPath();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
CPath::CPath(const std::wstring& s)
    :
    CPath(std::filesystem::path(s))
{}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
CPath::CPath(std::wstring&& s)
    :
    CPath(std::filesystem::path(std::move(s)))
{}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
CPath::CPath(const std::string& s)
    :
    CPath(std::filesystem::path(s))
{}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
CPath::CPath(std::string&& s)
    :
    CPath(std::filesystem::path(std::move(s)))
{}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
CPath::CPath(const char* s)
    :
    CPath(std::filesystem::path(s))
{}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
CPath& CPath::operator /= (const CPath & other)
{
    std::filesystem::path::operator /= (other);
    FixLongPath();
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
CPath& CPath::operator += (const CPath& other)
{
    std::filesystem::path::operator += (other);
    FixLongPath();
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
std::string CPath::u8StringAsString() const
{
    return std::string(reinterpret_cast<const char*>(u8string().c_str()));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
void CPath::FixLongPath()
{
    if (empty())
    {
        return;
    }

    int absoluteLength = static_cast<int>(std::filesystem::absolute(*this).native().size());
    if (absoluteLength >= MAX_PATH_LENGTH)
    {
        CLogger::GetInstance().LogWarning("path is too long, truncating: " + string());
        *this = std::filesystem::path(native().substr(0, MAX_PATH_LENGTH - 1 - absoluteLength + native().size()));
    }
}
