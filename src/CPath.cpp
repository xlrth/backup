#include "CPath.h"

#include "CLogger.h"

#ifdef _WIN32
static constexpr long long MAX_PATH_LENGTH = _MAX_FILESYS_NAME;
static constexpr long long MAX_HARD_LINK_COUNT = 1023;
#else
#   include <linux/limits.h>
static constexpr long long MAX_PATH_LENGTH = PATH_MAX
static constexpr long long MAX_HARD_LINK_COUNT = TODO: DEFINE FOR NON - WINDOWS;
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
CPath::CPath(const std::experimental::filesystem::path& other)
    :
    std::experimental::filesystem::path(other)
{
    FixLongPath();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
CPath::CPath(std::experimental::filesystem::path&& other)
    :
    std::experimental::filesystem::path(std::move(other))
{
    FixLongPath();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
CPath::CPath(const std::string& s)
    :
    CPath(std::experimental::filesystem::path(s))
{}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
CPath::CPath(std::string&& s)
    :
    CPath(std::experimental::filesystem::path(std::move(s)))
{}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
CPath::CPath(const char* s)
    :
    CPath(std::experimental::filesystem::path(s))
{}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
CPath& CPath::operator /= (const CPath & other)
{
    std::experimental::filesystem::path::operator /= (other);
    FixLongPath();
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
void CPath::FixLongPath()
{
    int absoluteLength = static_cast<int>(std::experimental::filesystem::absolute(*this).native().size());
    if (absoluteLength >= MAX_PATH_LENGTH)
    {
        CLogger::LogWarning("path is too long, truncating: " + string());
        *this = std::experimental::filesystem::path(native().substr(0, MAX_PATH_LENGTH - 1 - absoluteLength + native().size()));
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
CPath operator / (const CPath & _Left, const CPath & _Right)
{
    CPath result = _Left;
    return (result /= _Right);
}
