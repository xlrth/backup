#include "sqliteWrapper.h"

#include <assert.h>

#include "helpers.h"



////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
SqliteWrapper::Statement::Statement(sqlite3_stmt* statement)
    :
    mStatement(statement)
{}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
SqliteWrapper::Statement::~Statement() noexcept(false)
{
    VERIFY(SQLITE_OK == sqlite3_finalize(mStatement));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
bool SqliteWrapper::Statement::HasData()
{
    return SQLITE_ROW == sqlite3_step(mStatement);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
long long SqliteWrapper::Statement::ReadInt(int col)
{
    assert(sqlite3_column_type(mStatement, col) == SQLITE_INTEGER);
    return sqlite3_column_int64(mStatement, col);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
std::string SqliteWrapper::Statement::ReadString(int col)
{
    assert(sqlite3_column_type(mStatement, col) == SQLITE_TEXT);
    return (const char*)sqlite3_column_text(mStatement, col);
}



////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
SqliteWrapper::SqliteWrapper()
    :
    mDb(nullptr)
{}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
SqliteWrapper::SqliteWrapper(const std::string& path, bool readOnly)
    :
    mDb(nullptr)
{
    if (readOnly)
    {
        VERIFY(SQLITE_OK == sqlite3_open_v2(path.c_str(), &mDb, SQLITE_OPEN_READONLY, nullptr));
    }
    else
    {
        VERIFY(SQLITE_OK == sqlite3_open_v2(path.c_str(), &mDb, SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE, nullptr));
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
SqliteWrapper::SqliteWrapper(SqliteWrapper&& other)
    :
    mDb(other.mDb)
{
    other.mDb = nullptr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
SqliteWrapper::~SqliteWrapper() noexcept(false)
{
    if (mDb != nullptr)
    {
        Close();
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
SqliteWrapper& SqliteWrapper::operator = (SqliteWrapper&& other)
{
    mDb = other.mDb;
    other.mDb = nullptr;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
void SqliteWrapper::Close()
{
    VERIFY(mDb != nullptr);
    VERIFY(SQLITE_OK == sqlite3_close(mDb));
    mDb = nullptr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
void SqliteWrapper::RunQuery(const std::string& query)
{
    VERIFY(mDb != nullptr);
    VERIFY(SQLITE_OK == sqlite3_exec(mDb, query.c_str(), nullptr, nullptr, nullptr));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
SqliteWrapper::Statement SqliteWrapper::StartQuery(const std::string& query)
{
    VERIFY(mDb != nullptr);
    sqlite3_stmt* statement;
    VERIFY(SQLITE_OK == sqlite3_prepare_v2(mDb, query.c_str(), -1, &statement, 0));
    return statement;
}

