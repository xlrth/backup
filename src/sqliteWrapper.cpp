
#include <assert.h>

#include "sqlite3.h"
#include "helpers.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
sqlite3* OpenDB(const std::string& path, bool readOnly)
{
    sqlite3* db;
    if (readOnly)
    {
        VERIFY(SQLITE_OK == sqlite3_open_v2(path.c_str(), &db, SQLITE_OPEN_READONLY, nullptr));
    }
    else
    {
        VERIFY(SQLITE_OK == sqlite3_open_v2(path.c_str(), &db, SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE, nullptr));
    }
    return db;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
void CloseDB(sqlite3* db)
{
    VERIFY(SQLITE_OK == sqlite3_close(db));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
void RunQuery(sqlite3* db, const std::string& query)
{
    VERIFY(SQLITE_OK == sqlite3_exec(db, query.c_str(), nullptr, nullptr, nullptr));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
sqlite3_stmt* StartQuery(sqlite3* db, const std::string& query)
{
    sqlite3_stmt *st;
    VERIFY(SQLITE_OK == sqlite3_prepare_v2(db, query.c_str(), -1, &st, 0));
    return st;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
void FinalizeQuery(sqlite3_stmt* st)
{
    VERIFY(SQLITE_OK == sqlite3_finalize(st));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
bool HasData(sqlite3_stmt* st)
{
    return SQLITE_ROW == sqlite3_step(st);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
long long ReadInt(sqlite3_stmt* st, int col)
{
    assert(sqlite3_column_type(st, col) == SQLITE_INTEGER);
    return sqlite3_column_int64(st, col);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
std::string ReadString(sqlite3_stmt* st, int col)
{
    assert(sqlite3_column_type(st, col) == SQLITE_TEXT);
    return (const char*)sqlite3_column_text(st, col);
}
